resource_types:
- name: pivnet
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tag: latest-final

- name: azure-blobstore
  type: docker-image
  source:
    repository: pcfabr/azure-blobstore-resource

resources:
- name: daily
  type: time
  source:
    interval: 24h

- name: config
  type: git
  source:
    private_key: ((configuration.private_key))
    uri: ((configuration.uri))
    branch: master
    submodules: all
    depth: 1

- name: healthwatch-product
  type: azure-blobstore
  source:
    storage_account_name: ((storage_account_name))
    storage_account_key: ((storage_account_key))
    container: ((container))
    regexp: p-healthwatch-(.*).pivotal

- name: healthwatch-stemcell
  type: azure-blobstore
  source:
    storage_account_name: ((storage_account_name))
    storage_account_key: ((storage_account_key))
    container: ((container))
    regexp: healthwatch-stemcell/bosh-stemcell-(.*)-azure-hyperv-ubuntu-xenial-go_agent\.tgz

- name: opsman-product
  type: azure-blobstore
  source:
    storage_account_name: ((storage_account_name))
    storage_account_key: ((storage_account_key))
    container: ((container))
    regexp: OpsManager(.*)onAzure.yml

- name: pas-product
  type: azure-blobstore
  source:
    storage_account_name: ((storage_account_name))
    storage_account_key: ((storage_account_key))
    container: ((container))
    regexp: cf-(.*).pivotal

- name: pas-stemcell
  type: azure-blobstore
  source:
    storage_account_name: ((storage_account_name))
    storage_account_key: ((storage_account_key))
    container: ((container))
    regexp: pas-stemcell/bosh-stemcell-(.*)-azure-hyperv-ubuntu-xenial-go_agent\.tgz



- name: platform-automation-pivnet
  type: pivnet
  source:
    api_token: ((pivnet_token))
    product_slug: platform-automation
    product_version: 2\.(.*)
    sort_by: semver

- name: platform-automation-tasks
  type: azure-blobstore
  source:
    storage_account_name: ((storage_account_name))
    storage_account_key: ((storage_account_key))
    container: ((container))
    regexp: platform-automation-tasks-(.*).zip

- name: platform-automation-image
  type: azure-blobstore
  source:
    storage_account_name: ((storage_account_name))
    storage_account_key: ((storage_account_key))
    container: ((container))
    regexp: platform-automation-image-(.*).tgz

jobs:
- name: fetch-healthwatch
  plan:
  - aggregate:
    - get: daily
      trigger: true
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: config
  - task: unpack-tgz-image-shim
    config:
      platform: linux
      inputs:
      - name: platform-automation-image
      run:
        path: /bin/sh
        args:
        - -c
        - |
          tar -xf platform-automation-image/platform-automation-image-*.tar --directory unpacked-image
      outputs:
      - name: unpacked-image
  - task: credhub-interpolate
    image: unpacked-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    params:
      CREDHUB_CLIENT: ((credhub-client))
      CREDHUB_SECRET: ((credhub-secret))
      CREDHUB_SERVER: ((credhub-server))
      CREDHUB_CA_CERT: ((credhub-ca-cert))
      PREFIX: '/pipeline/azure'
      INTERPOLATION_PATH: "download-product-configs"
    input_mapping:
      files: config
    output_mapping:
      interpolated-files: config
  - task: download-healthwatch-product-and-stemcell
    image: unpacked-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: download-product-configs/healthwatch.yml
    output_mapping: {downloaded-stemcell: healthwatch-stemcell}
  - aggregate:
    - put: healthwatch-product
      params:
        file: downloaded-product/*.pivotal
    - put: healthwatch-stemcell
      params:
        file: healthwatch-stemcell/*.tgz

- name: fetch-opsman
  plan:
  - aggregate:
    - get: daily
      trigger: true
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: config
  - task: unpack-tgz-image-shim
    config:
      platform: linux
      inputs:
      - name: platform-automation-image
      run:
        path: /bin/sh
        args:
        - -c
        - |
          tar -xf platform-automation-image/platform-automation-image-*.tar --directory unpacked-image
      outputs:
      - name: unpacked-image
  - task: credhub-interpolate
    image: unpacked-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    params:
      CREDHUB_CLIENT: ((credhub-client))
      CREDHUB_SECRET: ((credhub-secret))
      CREDHUB_SERVER: ((credhub-server))
      CREDHUB_CA_CERT: ((credhub-ca-cert))
      PREFIX: '/pipeline/azure'
      INTERPOLATION_PATH: "download-product-configs"
    input_mapping:
      files: config
    output_mapping:
      interpolated-files: config
  - task: download-opsman-image
    image: unpacked-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: download-product-configs/opsman.yml
  - aggregate:
    - put: opsman-product
      params:
        file: downloaded-product/*

- name: fetch-pas
  plan:
  - aggregate:
    - get: daily
      trigger: true
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: config
  - task: unpack-tgz-image-shim
    config:
      platform: linux
      inputs:
      - name: platform-automation-image
      run:
        path: /bin/sh
        args:
        - -c
        - |
          tar -xf platform-automation-image/platform-automation-image-*.tar --directory unpacked-image
      outputs:
      - name: unpacked-image
  - task: credhub-interpolate
    image: unpacked-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    params:
      CREDHUB_CLIENT: ((credhub-client))
      CREDHUB_SECRET: ((credhub-secret))
      CREDHUB_SERVER: ((credhub-server))
      CREDHUB_CA_CERT: ((credhub-ca-cert))
      PREFIX: '/pipeline/azure'
      INTERPOLATION_PATH: "download-product-configs"
    input_mapping:
      files: config
    output_mapping:
      interpolated-files: config
  - task: download-pas-product-and-stemcell
    image: unpacked-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: download-product-configs/pas.yml
    output_mapping: {downloaded-stemcell: pas-stemcell}
  - aggregate:
    - put: pas-product
      params:
        file: downloaded-product/*.pivotal
    - put: pas-stemcell
      params:
        file: pas-stemcell/*.tgz

- name: fetch-platform-automation
  plan:
  - get: platform-automation-pivnet
    trigger: true
  - aggregate:
    - put: platform-automation-tasks
      params:
        file: platform-automation-pivnet/*tasks*.zip
    - put: platform-automation-image
      params:
        file: platform-automation-pivnet/*image*.tgz
