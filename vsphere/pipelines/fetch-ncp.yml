resource_types:
- name: pivnet
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tag: latest-final

resources:
- name: daily
  type: time
  source:
    interval: 24h

- name: opsman-product
  type: s3
  source:
    regexp: ops-manager-vsphere-(.*).ova
    endpoint: ((s3.address))
    access_key_id: ((s3.access_key))
    secret_access_key: ((s3.secret_key))
    skip_ssl_verification: true
    bucket: ((s3.bucket_name))

- name: ncp-product
  type: s3
  source:
    regexp: VMware-NSX-(.*).pivotal
    endpoint: ((s3.address))
    access_key_id: ((s3.access_key))
    secret_access_key: ((s3.secret_key))
    skip_ssl_verification: true
    bucket: ((s3.bucket_name))

- name: config
  type: git
  source:
    private_key: ((git_deploy_key.private_key))
    uri: ((git_uri))
    branch: master
    depth: 1

- name: platform-automation-pivnet
  type: pivnet
  source:
    api_token: ((pivnet_token))
    product_slug: platform-automation
    product_version: 3\.(.*)
    sort_by: semver

- name: platform-automation-tasks
  type: s3
  source:
    regexp: platform-automation-tasks-(.*).zip
    endpoint: ((s3.address))
    access_key_id: ((s3.access_key))
    secret_access_key: ((s3.secret_key))
    skip_ssl_verification: true
    bucket: ((s3.bucket_name))

- name: platform-automation-image
  type: s3
  source:
    regexp: platform-automation-image-(.*).tgz
    endpoint: ((s3.address))
    access_key_id: ((s3.access_key))
    secret_access_key: ((s3.secret_key))
    skip_ssl_verification: true
    bucket: ((s3.bucket_name))

jobs:
- name: fetch-platform-automation
  plan:
  - get: platform-automation-pivnet
    trigger: true
  - aggregate:
    - put: platform-automation-tasks
      params:
        file: platform-automation-pivnet/*tasks*.zip
      get_params:
        skip_download: "true"
    - put: platform-automation-image
      params:
        file: platform-automation-pivnet/*image*.tgz
      get_params:
        skip_download: "true"

- name: fetch-opsman
  plan:
  - aggregate:
    - get: daily
      trigger: true
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: config
  - task: credhub-interpolate
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    params:
      CREDHUB_CLIENT: ((credhub_client))
      CREDHUB_SECRET: ((credhub_secret))
      CREDHUB_SERVER: ((credhub_server))
      CREDHUB_CA_CERT: ((credhub_ca_cert.certificate))
      PREFIX: '/foundations/common'
      INTERPOLATION_PATHS: "download-product-configs"
    input_mapping:
      files: config
    output_mapping:
      interpolated-files: config
  - task: download-opsman-image
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: download-product-configs/opsman.yml
  - aggregate:
    - put: opsman-product
      params:
        file: downloaded-product/*
      get_params:
        skip_download: "true"


- name: fetch-ncp
  plan:
  - aggregate:
    - get: daily
      trigger: true
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: config
  - task: credhub-interpolate
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    params:
      CREDHUB_CLIENT: ((credhub_client))
      CREDHUB_SECRET: ((credhub_secret))
      CREDHUB_SERVER: ((credhub_server))
      CREDHUB_CA_CERT: ((credhub_ca_cert.certificate))
      PREFIX: '/foundations/common'
      INTERPOLATION_PATHS: "download-product-configs"
    input_mapping:
      files: config
    output_mapping:
      interpolated-files: config
  - task: download-opsman-image
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: download-product-configs/ncp.yml
  - aggregate:
    - put: ncp-product
      params:
        file: downloaded-product/*
      get_params:
        skip_download: "true"


